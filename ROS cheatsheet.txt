ROS cheatsheet
* CONDA
rqt will not work in conda environment
conda deactivate # conda activate (to undo)

* File nav
rospack find [package_name] # get path to ros package
roscd <package or stack> # get to ros package
roscd log # get log
rosls package # list ros packages

* catkin workspace
catkin_make
Example struct:
workspace_folder/        -- WORKSPACE
  src/                   -- SOURCE SPACE
    CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin
    package_1/
      CMakeLists.txt     -- CMakeLists.txt file for package_1
      package.xml        -- Package manifest for package_1
    ...
    package_n/
      CMakeLists.txt     -- CMakeLists.txt file for package_n
      package.xml        -- Package manifest for package_n

* Create package
catkin_create_pkg <package_name> [depend1] [depend2] [depend3] # create package, list dependencies
catkin_make # build packages in workspace
catkin_make --source my_src # build packages at specified location
. ~/catkin_ws/devel/setup.bash # add workspace to ROS environment

* Graph overview
Nodes: A node is an executable that uses ROS to communicate with other nodes.
Messages: ROS data type used when subscribing or publishing to a topic.
Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.
Master: Name service for ROS (i.e. helps nodes find each other)
rosout: ROS equivalent of stdout/stderr
roscore: Master + rosout + parameter server (parameter server will be introduced later) 

* Nodes
Executable that is connected to ROS network
roscore # create master
rosnode list # list nodes
rosnode info /rosout # get info on node rosout
rosrun [package_name] [node_name] # run node inside package
rosrun turtlesim turtlesim_node __name:=my_turtle # run node inside package & rename
rosnode cleanup # remove unused nodes
rosnode ping my_turtle # ping node

* Topics
Topic is a channel for outputting and receiving info
Publisher outputs info onto topic, subscribers listen to topic
rosrun rqt_graph rqt_graph # display graph of system
rostopic echo [topic] # show data published on topic
rostopic list -v # list topics (verbose)
rostopic type [topic] # get type of data for topic
rostopic type [topic] | rosmsg show # get type of data for topic, more info
rostopic pub -1 [topic] [msg_type] [args] # publish message to topic once
rostopic pub -r 1 [topic] [msg_type] [args] # publish message to topic every 1 second
rostopic hz [topic] # get data publish freq for topic

* Service
Service is a channel for making requests, and sending responses
rosservice list # print information about active services
rosservice call [service] [args] # call the service with the provided args
rosservice type [service] # print service type
rosservice type [service] | rossrv show # print service type, more info
rosservice find # find services by service type
rosservice uri # print service ROSRPC uri

* Parameter server
Way to store and manipulate data
rosparam set # set parameter
rosparam get # get parameter
rosparam get / # get all parameters
rosparam load [file_name] [namespace] # load parameters from file
rosparam dump [file_name] [namespace] # dump parameters to file
rosparam delete # delete parameter
rosparam list # list parameter names

* Debug
rosrun rqt_console rqt_console # open rqt console
rosrun rqt_logger_level rqt_logger_level # adjust verbosity of nodes

* Launch
roslaunch [package] [filename.launch] # launch node as specified by file

* Edit
rosed [package_name] [filename] # edit file in package

* srv and msg files
msg files are simple text files that describe the fields of a ROS message
	Header header
	string child_frame_id
	geometry_msgs/PoseWithCovariance pose
	geometry_msgs/TwistWithCovariance twist
srv file describes a service: a request and a response
	int64 A
	int64 B
	---
	int64 Sum
rosmsg show [message type] # show message format
rossrv show <service type> # show service format
roscp [package_name] [file_to_copy_path] [copy_path] # copy file in package

* Help
Using rosmsg as an example:
rosmsg -h # # list subcomands for rosmsg
rosmsg show -h # get info for subcommand

* Python
rospy.loginfo(str) - print str to console, node's log, and rosout
constructor args are in the same order as in the .msg file
Make sure you have sourced your workspace's setup.sh file after calling catkin_make: source ./devel/setup.bash

* C++
If you have subscription in an application, and don't have ros::spinOnce(), your callbacks would never get called
ros::spin() enters a loop, calling message callbacks as fast as possible; low CPU usage if nothing to do


